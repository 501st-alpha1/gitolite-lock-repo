#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use FindBin;

BEGIN { $ENV{LOCKREPO_LIBDIR} = "${FindBin::RealBin}/../src/lib"; }

use lib $ENV{GL_LIBDIR} $ENV{LOCKREPO_LIBDIR};
use Gitolite::Rc;
use Gitolite::Common;
use Gitolite::Conf::Load;

use constant CMD_LOCK        => 'lock';           ## no critic
use constant CMD_UNLOCK      => 'unlock';         ## no critic
use constant CMD_EXTERMINATE => 'exterminate';    ## no critic
use constant CMD_STATUS      => 'status';         ## no critic

use constant LOCK_FILE => "gl-lockrepo";          ## no critic

# TODO remove .git from CLI option, if given ( --lock foo.git -> --lock foo)

=for usage
Locks a whole repo to prevent pushing into it from any users, but the user which
locked the repo. Only the issuer of the lock can unlock the repo. Any user with
force rights (+) can exterminate the lock of other users.

Usage

  ssh git@host lock-repo --lock         <repo> [--message <message>]
  ssh git@host lock-repo --unlock       <repo>
  ssh git@host lock-repo --exterminate  <repo> [--message <message>]
  ssh git@host lock-repo --status       <repo>
  ssh git@host lock-repo --help

Options

  --lock|-l <repo>          Locks a repo for the user which invoked the command.
                            The repo must exist and the user need appropriate
                            access rights.
  --unlock|-u <repo>        Unlocks a repo. This is only possible for the user
                            which performed the previous lock.
  --exterminate|-e <repo>   Exterminates the lock of an other user. The user which
                            invokes this command need + right for that repo.
  --status|-s <repo>        Returns if the repo is locked or not.
  --message|-m <message>    Optional message. Combineable with --lock and --exterminate.
                            This message will be displayed to users which try to
                            push to a locked repo.
  -help|-h                  Shows this help.

You MUST NOT combine --lock, --unlock and/or --exterminate together in one command
invocation. That seems to be obvious, right?

Update hook

So that this comamnd affects the push the companion update hook needs to be
enabled. To enable it for everybody in all repository you can add this at
the bottom of your gitolite.conf:

  repo @all
      -   VREF/lock-repo  =   @all

FAQ

 Q: What should I do, if repo can't be unlocked?
 A: The lock information is stored in the bare repository in the file "gl-lockrepo".
    If you remove the file the repo is unlocked. That you can't unlock a repo
    may only happen due to bug. So for debugging it may be helpfull to keep a
    backup of that file.

Bugs

Bugs you can report to https://github.com/Weltraumschaf/gitolite/issues
=cut

usage() if not @ARGV or $ARGV[0] eq '-h' or $ARGV[0] eq '--help';
$ENV{GL_USER} or _die "GL_USER not set";

my $lockRepo        = '';
my $unlockRepo      = '';
my $exterminateRepo = '';
my $statusRepo      = '';
my @messageParts;

GetOptions(
    "lock=s"        => \$lockRepo,
    "unlock=s"      => \$unlockRepo,
    "exterminate=s" => \$exterminateRepo,
    "status=s"      => \$statusRepo,
    "message=s{1,}" => \@messageParts
) or _die("Error in command line arguments!\n");

my $message = join( ' ', @messageParts );
my $op      = '';
my $repo    = '';

if ($lockRepo) {
    $op   = CMD_LOCK;
    $repo = $lockRepo;
} elsif ($unlockRepo) {
    $op   = CMD_UNLOCK;
    $repo = $unlockRepo;
} elsif ($exterminateRepo) {
    $op   = CMD_EXTERMINATE;
    $repo = $exterminateRepo;
} elsif ($statusRepo) {
    $op   = CMD_STATUS;
    $repo = $statusRepo;
}

usage() if not $op;

if ( substr( $repo, -4 ) eq '.git' ) {

    # Remove trailing .git because access right check will fail with it.
    $repo = substr( $repo, 0, rindex( $repo, q{.} ) );
}
_die "You are not authorised"
  if access( $repo, $ENV{GL_USER}, 'W', 'any' ) =~ /DENIED/;
_die "You are not authorised"
  if $op eq CMD_EXTERMINATE
      and access( $repo, $ENV{GL_USER}, '+', 'any' ) =~ /DENIED/;

_chdir( $ENV{GL_REPO_BASE} );
_chdir("$repo.git");    # .Git is only on the file system, not for the rights checking above!

if ( $op eq CMD_LOCK ) {
    f_lock( $repo, $message );
} elsif ( $op eq CMD_UNLOCK ) {
    f_unlock($repo);
} elsif ( $op eq CMD_EXTERMINATE ) {
    f_exterminate( $repo, $message );
} elsif ( $op eq CMD_STATUS ) {
    f_status($repo);
}
